  
Description: >
  AWS Lambda Nodejs Starter project.
  To add a new function define the function role and the function itself following
  the template of FooFunction.
Parameters:
  HaloVersion:
    Description: "Version of the lambda function required to update existing stack"
    Type: String
    Default: "latest"

  S3BucketName:
    Description: "S3BucketName"
    Type: "String"

Resources:
  HaloApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "HaloApi"
      Description: "Main API for working with halos"

  HaloApiRootMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "ANY"
      RequestParameters:
        method.request.querystring.id: false
        method.request.querystring.initiator: false
        method.request.querystring.recipient: false
        method.request.querystring.subreddit: false
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        RequestParameters:
          integration.request.querystring.id: method.request.querystring.id
          integration.request.querystring.initiator: method.request.querystring.initiator
          integration.request.querystring.recipient: method.request.querystring.recipient
          integration.request.querystring.subreddit: method.request.querystring.subreddit
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "HaloLambda.Arn"
      ResourceId: !GetAtt "HaloApi.RootResourceId"
      RestApiId: !Ref "HaloApi"

  HaloApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "HaloApiRootMethod"
    Properties:
      RestApiId: !Ref "HaloApi"
      StageName: "Production"

  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "LambdaRolePolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: "*"
            - Effect: Allow
              Action:
              - dynamodb:PutItem
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:Scan
              Resource: "*"

  HaloLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Sub Halo-${HaloVersion}.zip
      Description: Lambda function that schedules updates
      Environment:
        Variables:
          NODE_ENV: production
      FunctionName: HaloLambda
      Handler: "index.handler"
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn
      Runtime: "nodejs12.x"
      Timeout: 100

  HaloLambdaInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "HaloLambda.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HaloApi}/*/POST/"